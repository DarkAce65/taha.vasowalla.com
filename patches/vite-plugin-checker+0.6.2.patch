diff --git a/node_modules/vite-plugin-checker/dist/esm/checkers/eslint/main.js b/node_modules/vite-plugin-checker/dist/esm/checkers/eslint/main.js
index 4970ef6..db0be46 100644
--- a/node_modules/vite-plugin-checker/dist/esm/checkers/eslint/main.js
+++ b/node_modules/vite-plugin-checker/dist/esm/checkers/eslint/main.js
@@ -1,3 +1,4 @@
+import Module from 'node:module';
 import chokidar from "chokidar";
 import { ESLint } from "eslint";
 import path from "path";
@@ -19,6 +20,7 @@ import { ACTION_TYPES, DiagnosticLevel } from "../../types.js";
 import { translateOptions } from "./cli.js";
 import { options as optionator } from "./options.js";
 const __filename = fileURLToPath(import.meta.url);
+const require = Module.createRequire(import.meta.url);
 const manager = new FileDiagnosticManager();
 let createServeAndBuild;
 const createDiagnostic = (pluginConfig) => {
@@ -57,7 +59,17 @@ const createDiagnostic = (pluginConfig) => {
         ...translatedOptions,
         ...(_a = pluginConfig.eslint.dev) == null ? void 0 : _a.overrideConfig
       };
-      const eslint = new ESLint(eslintOptions);
+      let eslint;
+      if (pluginConfig.eslint.useFlatConfig) {
+        const { FlatESLint, shouldUseFlatConfig } = require('eslint/use-at-your-own-risk');
+        if (shouldUseFlatConfig?.()) {
+          eslint = new FlatESLint({ cwd: root });
+        } else {
+          throw Error('Please upgrade your eslint to latest version to use `useFlatConfig` option.')
+        }
+      } else {
+        eslint = new ESLint(eslintOptions);
+      }
       const dispatchDiagnostics = () => {
         var _a2;
         const diagnostics2 = filterLogLevel(manager.getDiagnostics(), logLevel);
diff --git a/node_modules/vite-plugin-checker/dist/esm/types.d.ts b/node_modules/vite-plugin-checker/dist/esm/types.d.ts
index f1271f4..a581bf7 100644
--- a/node_modules/vite-plugin-checker/dist/esm/types.d.ts
+++ b/node_modules/vite-plugin-checker/dist/esm/types.d.ts
@@ -46,6 +46,10 @@ type EslintConfig = false | {
      * default config for dev mode when options.eslint.dev.eslint is nullable.
      */
     lintCommand: string;
+    /**
+     * @default false
+     */
+    useFlatConfig?: boolean
     dev?: Partial<{
         /** You can override the options of translated from lintCommand. */
         overrideConfig: ESLint.Options;
